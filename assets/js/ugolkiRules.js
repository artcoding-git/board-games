// Generated by CoffeeScript 1.7.1
(function() {
  var UgolkiRules;

  angular.module("app").service("ugolkiRules", UgolkiRules = (function() {
    UgolkiRules.$inject = ["players", "UgolkiPiece"];

    function UgolkiRules(players, UgolkiPiece) {
      var i;
      this.initialPieces = ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 12; i = ++_i) {
          _results.push({
            player: players.white,
            pieceType: UgolkiPiece,
            row: 4 + parseInt(i / 3),
            column: 5 + i % 3
          });
        }
        return _results;
      })()).concat((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 12; i = ++_i) {
          _results.push({
            player: players.black,
            pieceType: UgolkiPiece,
            row: parseInt(i / 3),
            column: i % 3
          });
        }
        return _results;
      })());
      this.firstPlayer = players.white;
      this.manualEndTurn = function(game) {
        var point;
        return (point = game.history.currentPoint()).movePlayer === point.currentPlayer;
      };
      this.message = function(game) {
        return null;
      };
      this.winner = function(game) {
        var notWinners, piece, player, playerColor, _i, _len, _ref;
        notWinners = {};
        _ref = game.pieces;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          piece = _ref[_i];
          if (!(piece.player === players.white && piece.cell.row < 4 && piece.cell.column < 3) && !(piece.player === players.black && piece.cell.row >= 4 && piece.cell.column >= 5)) {
            notWinners[piece.player] = 1;
          }
        }
        return ((function() {
          var _results;
          _results = [];
          for (playerColor in players) {
            player = players[playerColor];
            if (notWinners[player] !== 1) {
              _results.push(player);
            }
          }
          return _results;
        })())[0];
      };
    }

    return UgolkiRules;

  })());

}).call(this);

//# sourceMappingURL=ugolkiRules.map
