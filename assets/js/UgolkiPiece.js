// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module("app").factory("UgolkiPiece", [
    "Piece", function(Piece) {
      var UgolkiPiece;
      return UgolkiPiece = (function(_super) {
        __extends(UgolkiPiece, _super);

        UgolkiPiece.$inject = ["$injector"];

        function UgolkiPiece($injector) {
          UgolkiPiece.__super__.constructor.call(this, $injector);
        }

        UgolkiPiece.prototype.availableMovesWithLastOne = function(lastMoveCell) {
          var cell, continueMove, nextCell, point, result, _ref, _ref1, _ref2, _ref3;
          result = [];
          continueMove = (lastMoveCell != null) || (point = this.game.history.currentPoint()).movePlayer === point.currentPlayer;
          if (continueMove && (lastMoveCell == null)) {
            lastMoveCell = this.game.cells[point.move.to.row][point.move.to.column];
          }
          if (continueMove && this.cell !== lastMoveCell) {
            return result;
          }
          if (!continueMove) {
            if (((cell = this.cell.toLeft()) != null) && (cell.piece() == null)) {
              result.push(cell);
            }
            if (((cell = this.cell.toRight()) != null) && (cell.piece() == null)) {
              result.push(cell);
            }
            if (((cell = this.cell.up()) != null) && (cell.piece() == null)) {
              result.push(cell);
            }
            if (((cell = this.cell.down()) != null) && (cell.piece() == null)) {
              result.push(cell);
            }
          }
          if (((cell = (_ref = (nextCell = this.cell.toLeft())) != null ? _ref.toLeft() : void 0) != null) && (nextCell.piece() != null) && (cell.piece() == null)) {
            result.push(cell);
          }
          if (((cell = (_ref1 = (nextCell = this.cell.toRight())) != null ? _ref1.toRight() : void 0) != null) && (nextCell.piece() != null) && (cell.piece() == null)) {
            result.push(cell);
          }
          if (((cell = (_ref2 = (nextCell = this.cell.up())) != null ? _ref2.up() : void 0) != null) && (nextCell.piece() != null) && (cell.piece() == null)) {
            result.push(cell);
          }
          if (((cell = (_ref3 = (nextCell = this.cell.down())) != null ? _ref3.down() : void 0) != null) && (nextCell.piece() != null) && (cell.piece() == null)) {
            result.push(cell);
          }
          return result;
        };

        UgolkiPiece.prototype.availableMoves = function() {
          var point, result;
          result = this.availableMovesWithLastOne();
          if ((point = this.game.history.currentPoint()).movePlayer === point.currentPlayer) {
            result.splice(result.indexOf(this.game.cells[point.move.from.row][point.move.from.column]), 1);
          }
          return result;
        };

        UgolkiPiece.prototype.move = function(newCell) {
          var distance, move;
          distance = this.distanceTo(newCell);
          UgolkiPiece.__super__.move.apply(this, arguments);
          return distance === 1 || ((function() {
            var _i, _len, _ref, _results;
            _ref = this.availableMovesWithLastOne(this.cell);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              move = _ref[_i];
              if (this.distanceTo(move) === 2) {
                _results.push(move);
              }
            }
            return _results;
          }).call(this)).length === 1;
        };

        UgolkiPiece.prototype.distanceTo = function(newCell) {
          return Math.abs(newCell.row - this.cell.row) + Math.abs(newCell.column - this.cell.column);
        };

        return UgolkiPiece;

      })(Piece);
    }
  ]);

}).call(this);

//# sourceMappingURL=UgolkiPiece.map
