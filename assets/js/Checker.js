// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module("app").factory("Checker", [
    "CheckerPiece", "players", function(CheckerPiece, players) {
      var Checker;
      return Checker = (function(_super) {
        __extends(Checker, _super);

        Checker.$inject = ["$injector", "CheckerKing"];

        function Checker($injector, CheckerKing) {
          this.CheckerKing = CheckerKing;
          Checker.__super__.constructor.call(this, $injector);
        }

        Checker.prototype.pieceAvailableMoves = function() {
          var ahead, cell, enemy, result, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
          result = Checker.__super__.pieceAvailableMoves.apply(this, arguments);
          if (this.cell == null) {
            return result;
          }
          if ((enemy = this.piecesBefore((cell = (_ref = this.cell.up()) != null ? (_ref1 = _ref.up()) != null ? (_ref2 = _ref1.toLeft()) != null ? _ref2.toLeft() : void 0 : void 0 : void 0))).length === 1 && enemy[0].player !== this.player && !cell.piece()) {
            result.push(cell);
          }
          if ((enemy = this.piecesBefore((cell = (_ref3 = this.cell.up()) != null ? (_ref4 = _ref3.up()) != null ? (_ref5 = _ref4.toRight()) != null ? _ref5.toRight() : void 0 : void 0 : void 0))).length === 1 && enemy[0].player !== this.player && !cell.piece()) {
            result.push(cell);
          }
          if ((enemy = this.piecesBefore((cell = (_ref6 = this.cell.down()) != null ? (_ref7 = _ref6.down()) != null ? (_ref8 = _ref7.toLeft()) != null ? _ref8.toLeft() : void 0 : void 0 : void 0))).length === 1 && enemy[0].player !== this.player && !cell.piece()) {
            result.push(cell);
          }
          if ((enemy = this.piecesBefore((cell = (_ref9 = this.cell.down()) != null ? (_ref10 = _ref9.down()) != null ? (_ref11 = _ref10.toRight()) != null ? _ref11.toRight() : void 0 : void 0 : void 0))).length === 1 && enemy[0].player !== this.player && !cell.piece()) {
            result.push(cell);
          }
          if (result.length === 0) {
            ahead = this.player === players.white ? "up" : "down";
            if (((cell = (_ref12 = this.cell[ahead]()) != null ? _ref12.toLeft() : void 0) != null) && (cell.piece() == null)) {
              result.push(cell);
            }
            if (((cell = (_ref13 = this.cell[ahead]()) != null ? _ref13.toRight() : void 0) != null) && (cell.piece() == null)) {
              result.push(cell);
            }
          }
          return result;
        };

        Checker.prototype.move = function(newCell) {
          var enemies;
          enemies = this.piecesBefore(newCell);
          Checker.__super__.move.apply(this, arguments);
          if (this.player === players.white && newCell.row === 0 || this.player === players.black && newCell.row === 7) {
            this.replaceBy(this.CheckerKing);
          }
          return enemies.length === 0 || this.cannotContinueMove();
        };

        return Checker;

      })(CheckerPiece);
    }
  ]);

}).call(this);

//# sourceMappingURL=Checker.map
