// Generated by CoffeeScript 1.7.1
(function() {
  var ChessRules;

  angular.module("app").service("chessRules", ChessRules = (function() {
    ChessRules.$inject = ["players", "ChessPiece", "King", "Queen", "Rook", "Bishop", "Knight", "Pawn"];

    function ChessRules(players, ChessPiece, King, Queen, Rook, Bishop, Knight, Pawn) {
      var i;
      this.initialPieces = [
        {
          player: players.white,
          row: 7,
          column: 4,
          pieceType: King
        }, {
          player: players.white,
          row: 7,
          column: 3,
          pieceType: Queen
        }, {
          player: players.white,
          row: 7,
          column: 0,
          pieceType: Rook
        }, {
          player: players.white,
          row: 7,
          column: 7,
          pieceType: Rook
        }, {
          player: players.white,
          row: 7,
          column: 2,
          pieceType: Bishop
        }, {
          player: players.white,
          row: 7,
          column: 5,
          pieceType: Bishop
        }, {
          player: players.white,
          row: 7,
          column: 1,
          pieceType: Knight
        }, {
          player: players.white,
          row: 7,
          column: 6,
          pieceType: Knight
        }
      ].concat(((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 7; i = ++_i) {
          _results.push({
            player: players.white,
            row: 6,
            column: i,
            pieceType: Pawn
          });
        }
        return _results;
      })()).concat([
        {
          player: players.black,
          row: 0,
          column: 4,
          pieceType: King
        }, {
          player: players.black,
          row: 0,
          column: 3,
          pieceType: Queen
        }, {
          player: players.black,
          row: 0,
          column: 0,
          pieceType: Rook
        }, {
          player: players.black,
          row: 0,
          column: 7,
          pieceType: Rook
        }, {
          player: players.black,
          row: 0,
          column: 2,
          pieceType: Bishop
        }, {
          player: players.black,
          row: 0,
          column: 5,
          pieceType: Bishop
        }, {
          player: players.black,
          row: 0,
          column: 1,
          pieceType: Knight
        }, {
          player: players.black,
          row: 0,
          column: 6,
          pieceType: Knight
        }
      ].concat((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 7; i = ++_i) {
          _results.push({
            player: players.black,
            row: 1,
            column: i,
            pieceType: Pawn
          });
        }
        return _results;
      })())));
      this.firstPlayer = players.white;
      this.manualEndTurn = function(game) {
        return false;
      };
      this.message = function(game) {
        var hasAvailableMoves, isCheck;
        hasAvailableMoves = game.pieces.some(function(piece) {
          return piece.player === game.currentPlayer && piece.availableMoves().length;
        });
        isCheck = this.isCheck(game);
        if (hasAvailableMoves) {
          if (isCheck) {
            return "Check!";
          } else {
            return null;
          }
        } else {
          if (isCheck) {
            return "Checkmate!";
          } else {
            return "Stalemate!";
          }
        }
      };
      this.winner = function(game) {
        var hasAvailableMoves, isCheck;
        hasAvailableMoves = game.pieces.some(function(piece) {
          return piece.player === game.currentPlayer && piece.availableMoves().length;
        });
        if (!hasAvailableMoves) {
          isCheck = this.isCheck(game);
          if (isCheck) {
            return game.enemy();
          } else {
            return null;
          }
        }
        return void 0;
      };
      this.isCheck = function(game, toPlayer) {
        var king, piece;
        if (toPlayer == null) {
          toPlayer = game.currentPlayer;
        }
        king = ((function() {
          var _i, _len, _ref, _results;
          _ref = game.pieces;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            piece = _ref[_i];
            if (piece.constructor.name === "King" && piece.player === toPlayer) {
              _results.push(piece);
            }
          }
          return _results;
        })())[0];
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = game.pieces;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            piece = _ref[_i];
            if (piece.player !== toPlayer) {
              _results.push(~piece.pieceCanAttackMoves().indexOf(king.cell));
            }
          }
          return _results;
        })()).some(function(i) {
          return i;
        });
      };
    }

    return ChessRules;

  })());

}).call(this);

//# sourceMappingURL=chessRules.map
