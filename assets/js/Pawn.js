// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module("app").factory("Pawn", [
    "ChessPiece", "players", function(ChessPiece, players) {
      var Pawn;
      return Pawn = (function(_super) {
        __extends(Pawn, _super);

        Pawn.$inject = ["$injector", "Queen"];

        function Pawn($injector, Queen) {
          this.Queen = Queen;
          Pawn.__super__.constructor.call(this, $injector);
        }

        Pawn.prototype.pieceAvailableMoves = function() {
          var ahead, isInitialPosition, result, _ref, _ref1, _ref2, _ref3;
          result = Pawn.__super__.pieceAvailableMoves.call(this);
          if (this.cell == null) {
            return result;
          }
          ahead = this.player === players.white ? "up" : "down";
          isInitialPosition = this.player === players.white && this.cell.row === 6 || this.player === players.black && this.cell.row === 1;
          if (this.cell[ahead]().piece() == null) {
            result.push(this.cell[ahead]());
          }
          if (isInitialPosition && (this.cell[ahead]().piece() == null) && (this.cell[ahead]()[ahead]().piece() == null)) {
            result.push(this.cell[ahead]()[ahead]());
          }
          if ((((_ref = this.cell[ahead]().toLeft()) != null ? (_ref1 = _ref.piece()) != null ? _ref1.player : void 0 : void 0) || this.player) !== this.player) {
            result.push(this.cell[ahead]().toLeft());
          }
          if ((((_ref2 = this.cell[ahead]().toRight()) != null ? (_ref3 = _ref2.piece()) != null ? _ref3.player : void 0 : void 0) || this.player) !== this.player) {
            result.push(this.cell[ahead]().toRight());
          }
          return result;
        };

        Pawn.prototype.move = function(newCell) {
          Pawn.__super__.move.apply(this, arguments);
          if (this.player === players.white && newCell.row === 0 || this.player === players.black && newCell.row === 7) {
            this.replaceBy(this.Queen);
          }
          return true;
        };

        return Pawn;

      })(ChessPiece);
    }
  ]);

}).call(this);

//# sourceMappingURL=Pawn.map
