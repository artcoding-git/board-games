// Generated by CoffeeScript 1.7.1
(function() {
  var GameController;

  angular.module("app").controller("GameController", GameController = (function() {
    GameController.$inject = ["$routeParams", "$injector", "$scope", "Game", "gameRules", "gameName", "players"];

    function GameController($routeParams, $injector, $scope, Game, gameRules, gameName, players) {
      var column, game, i, row, update, updatePieces;
      this.gameName = gameName;
      game = $injector.instantiate(Game);
      game.init(this.gameName, gameRules);
      this.currentPlayer = game.currentPlayer;
      this.selected = null;
      this.cells = (function() {
        var _i, _results;
        _results = [];
        for (row = _i = 0; _i < 8; row = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (column = _j = 0; _j < 8; column = ++_j) {
              _results1.push({
                row: row,
                column: column
              });
            }
            return _results1;
          })());
        }
        return _results;
      })();
      this.rowNames = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 8; _i >= 1; i = --_i) {
          _results.push(String(i));
        }
        return _results;
      })();
      this.columnNames = "abcdefgh".split("");
      this.pieces = [];
      updatePieces = (function(_this) {
        return function() {
          var cell, gamePiece, piece, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _results;
          _this.deadPieces = [];
          _ref = _this.cells;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            row = _ref[_i];
            for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
              cell = row[_j];
              cell.piece = null;
            }
          }
          _ref1 = game.pieces;
          for (i = _k = 0, _len2 = _ref1.length; _k < _len2; i = ++_k) {
            gamePiece = _ref1[i];
            piece = ((function() {
              var _l, _len3, _ref2, _results;
              _ref2 = this.pieces;
              _results = [];
              for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                piece = _ref2[_l];
                if (piece.index === i) {
                  _results.push(piece);
                }
              }
              return _results;
            }).call(_this))[0];
            if (gamePiece.cell != null) {
              if (piece == null) {
                piece = {
                  index: i
                };
                _this.pieces.push(piece);
              }
              cell = _this.cells[gamePiece.cell.row][gamePiece.cell.column];
              cell.piece = piece;
              piece.kind = gamePiece.constructor.name;
              piece.player = gamePiece.player;
              piece.canMove = gamePiece.availableMoves().length > 0;
              piece.cell = cell;
            } else {
              if (piece != null) {
                _this.pieces.splice(_this.pieces.indexOf(piece), 1);
              }
              _this.deadPieces.push({
                kind: gamePiece.constructor.name,
                player: gamePiece.player,
                index: i
              });
            }
          }
          _ref2 = _this.pieces;
          _results = [];
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            piece = _ref2[_l];
            if (piece.index >= game.pieces.length) {
              _results.push(_this.pieces.splice(_this.pieces.indexOf(piece), 1));
            }
          }
          return _results;
        };
      })(this);
      updatePieces();
      this.playerColor = function(player) {
        var key, value;
        return ((function() {
          var _results;
          _results = [];
          for (key in players) {
            value = players[key];
            if (value === player) {
              _results.push(key);
            }
          }
          return _results;
        })())[0];
      };
      this.setSelected = function(cell) {
        var gamePiece, move;
        this.selected = {
          cell: cell,
          piece: cell != null ? cell.piece : void 0,
          availableMoves: [],
          canAttackMoves: []
        };
        if (this.selected.piece != null) {
          gamePiece = game.pieces[this.selected.piece.index];
          this.selected.availableMoves = (function() {
            var _i, _len, _ref, _results;
            _ref = gamePiece.availableMoves();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              move = _ref[_i];
              _results.push(this.cells[move.row][move.column]);
            }
            return _results;
          }).call(this);
          return this.selected.canAttackMoves = (function() {
            var _i, _len, _ref, _results;
            _ref = gamePiece.canAttackMoves();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              move = _ref[_i];
              _results.push(this.cells[move.row][move.column]);
            }
            return _results;
          }).call(this);
        }
      };
      this.setSelected(null);
      this.cellClick = function(cell) {
        var _ref;
        if (game.winner() !== void 0) {
          return;
        }
        if (~this.selected.availableMoves.indexOf(cell)) {
          game.move(this.selected.cell.row, this.selected.cell.column, cell.row, cell.column);
          update(this.currentPlayer !== game.currentPlayer);
          if (this.selected.cell != null) {
            return this.setSelected(cell);
          }
        } else {
          if (((_ref = cell.piece) != null ? _ref.player : void 0) === this.currentPlayer) {
            return this.setSelected(cell);
          }
        }
      };
      this.dropped = function(pieceId, cellId) {
        var cell, cellEl;
        cellEl = angular.element(document.getElementById(cellId));
        cell = this.cells[Number(cellEl.attr("ng-cell-row"))][Number(cellEl.attr("ng-cell-column"))];
        this.cellClick(cell);
        return $scope.$apply();
      };
      this.endTurn = function() {
        game.endTurn();
        return update();
      };
      this.manualEndTurn = function() {
        return game.manualEndTurn();
      };
      this.gameMessage = function() {
        return game.message();
      };
      this.gameOverMessage = function() {
        var winner;
        winner = game.winner();
        switch (winner) {
          case void 0:
            return "";
          case null:
            return "Game over. Draw game.";
          default:
            return "Game over. Winner: " + (this.playerColor(winner));
        }
      };
      this.prevMove = function() {
        game.history.back();
        return update();
      };
      this.nextMove = function() {
        game.history.forward();
        return update();
      };
      this.canPrevMove = function() {
        return game.history.currentPointIndex > 0;
      };
      this.canNextMove = function() {
        return game.history.currentPointIndex < game.history.points.length - 1;
      };
      this.lastMove = function() {
        var move;
        move = game.history.currentPoint().move;
        if (move != null) {
          return "" + this.columnNames[move.from.column] + this.rowNames[move.from.row] + " - " + this.columnNames[move.to.column] + this.rowNames[move.to.row];
        }
      };
      update = (function(_this) {
        return function(resetSelected) {
          if (resetSelected == null) {
            resetSelected = true;
          }
          _this.currentPlayer = game.currentPlayer;
          if (resetSelected) {
            _this.setSelected(null);
          }
          return updatePieces();
        };
      })(this);
    }

    return GameController;

  })());

}).call(this);

//# sourceMappingURL=gameController.map
