// Generated by CoffeeScript 1.7.1
(function() {
  var ReversiRules;

  angular.module("app").service("reversiRules", ReversiRules = (function() {
    ReversiRules.$inject = ["players", "ReversiPiece"];

    function ReversiRules(players, ReversiPiece) {
      this.initialPieces = [
        {
          player: players.white,
          pieceType: ReversiPiece,
          row: 3,
          column: 3
        }, {
          player: players.black,
          pieceType: ReversiPiece,
          row: 3,
          column: 4
        }, {
          player: players.black,
          pieceType: ReversiPiece,
          row: 4,
          column: 3
        }, {
          player: players.white,
          pieceType: ReversiPiece,
          row: 4,
          column: 4
        }
      ];
      this.firstPlayer = players.white;
      this.manualEndTurn = function(game) {
        return false;
      };
      this.message = function(game) {
        return null;
      };
      this.winner = function(game) {
        var count, maxPieceCount, piece, pieceCount, player, playerColor, winners, _i, _len, _ref;
        if (game.pieces.every(function(piece) {
          return piece.availableMoves().length === 0;
        })) {
          pieceCount = {};
          for (playerColor in players) {
            player = players[playerColor];
            pieceCount[player] = 0;
          }
          _ref = game.pieces;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            piece = _ref[_i];
            pieceCount[piece.player]++;
          }
          maxPieceCount = Math.max.apply(Math, (function() {
            var _results;
            _results = [];
            for (player in pieceCount) {
              count = pieceCount[player];
              _results.push(count);
            }
            return _results;
          })());
          winners = (function() {
            var _results;
            _results = [];
            for (player in pieceCount) {
              count = pieceCount[player];
              if (count === maxPieceCount) {
                _results.push(player);
              }
            }
            return _results;
          })();
          if (winners.length === 1) {
            return winners[0];
          } else {
            return null;
          }
        }
        return void 0;
      };
    }

    return ReversiRules;

  })());

}).call(this);

//# sourceMappingURL=reversiRules.map
