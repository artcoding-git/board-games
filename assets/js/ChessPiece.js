// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module("app").factory("ChessPiece", [
    "Piece", function(Piece) {
      var ChessPiece;
      return ChessPiece = (function(_super) {
        __extends(ChessPiece, _super);

        ChessPiece.$inject = ["$injector"];

        function ChessPiece($injector) {
          ChessPiece.__super__.constructor.call(this, $injector);
        }

        ChessPiece.prototype.pieceAvailableMoves = function() {
          return [];
        };

        ChessPiece.prototype.availableMoves = function() {
          var newCell, result, _i, _len, _ref;
          result = [];
          _ref = this.pieceAvailableMoves();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            newCell = _ref[_i];
            this.game.move(this.cell.row, this.cell.column, newCell.row, newCell.column, false);
            if (!this.game.gameRules.isCheck(this.game, this.player)) {
              result.push(newCell);
            }
            this.game.history.navigate(this.game.history.currentPointIndex);
          }
          return result;
        };

        ChessPiece.prototype.pieceCanAttackMoves = function() {
          return this.pieceAvailableMoves().filter(function(cell) {
            var _ref;
            return (((_ref = cell.piece()) != null ? _ref.player : void 0) || this.player) !== this.player;
          });
        };

        ChessPiece.prototype.canAttackMoves = function() {
          return this.availableMoves().filter(function(cell) {
            var _ref;
            return (((_ref = cell.piece()) != null ? _ref.player : void 0) || this.player) !== this.player;
          });
        };

        ChessPiece.prototype.move = function(newCell) {
          var _ref;
          if ((_ref = newCell.piece()) != null) {
            _ref.cell = null;
          }
          ChessPiece.__super__.move.apply(this, arguments);
          return true;
        };

        ChessPiece.prototype.unmove = function(oldCell) {
          return this.cell = oldCell;
        };

        return ChessPiece;

      })(Piece);
    }
  ]);

}).call(this);

//# sourceMappingURL=ChessPiece.map
